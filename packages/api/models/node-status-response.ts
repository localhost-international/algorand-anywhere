/* tslint:disable */
/* eslint-disable */
/**
 * Algod Testnet V3 API v2
 * V2 API endpoint for algod operations.
 *
 * OpenAPI spec version: 3.15.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * NodeStatus contains the information about a node status
 * @export
 * @interface NodeStatusResponse
 */
export interface NodeStatusResponse {
    /**
     * LastVersion indicates the last consensus version supported
     * @type {string}
     * @memberof NodeStatusResponse
     */
    lastVersion: string;
    /**
     * Next protocol round
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeNextProtocolVoteBefore?: number;
    /**
     * The number of accounts from the current catchpoint that have been processed so far as part of the catchup
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointProcessedAccounts?: number;
    /**
     * The current catchpoint that is being caught up to
     * @type {string}
     * @memberof NodeStatusResponse
     */
    catchpoint?: string;
    /**
     * NextVersionRound is the round at which the next consensus version will apply
     * @type {number}
     * @memberof NodeStatusResponse
     */
    nextVersionRound: number;
    /**
     * The total number of blocks that are required to complete the current catchpoint catchup
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointTotalBlocks?: number;
    /**
     * Total votes cast for consensus upgrade
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeVotes?: number;
    /**
     * This node's upgrade vote
     * @type {boolean}
     * @memberof NodeStatusResponse
     */
    upgradeNodeVote?: boolean;
    /**
     * Yes votes required for consensus upgrade
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeVotesRequired?: number;
    /**
     * Upgrade delay
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeDelay?: number;
    /**
     * The number of blocks that have already been obtained by the node as part of the catchup
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointAcquiredBlocks?: number;
    /**
     * TimeSinceLastRound in nanoseconds
     * @type {number}
     * @memberof NodeStatusResponse
     */
    timeSinceLastRound: number;
    /**
     * StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
     * @type {boolean}
     * @memberof NodeStatusResponse
     */
    stoppedAtUnsupportedRound: boolean;
    /**
     * The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointProcessedKvs?: number;
    /**
     * NextVersionSupported indicates whether the next consensus version is supported by this node
     * @type {boolean}
     * @memberof NodeStatusResponse
     */
    nextVersionSupported: boolean;
    /**
     * Total voting ounds for current upgrade
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeVoteRounds?: number;
    /**
     * The last catchpoint seen by the node
     * @type {string}
     * @memberof NodeStatusResponse
     */
    lastCatchpoint?: string;
    /**
     * The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointVerifiedKvs?: number;
    /**
     * NextVersion of consensus protocol to use
     * @type {string}
     * @memberof NodeStatusResponse
     */
    nextVersion: string;
    /**
     * Yes votes cast for consensus upgrade
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeYesVotes?: number;
    /**
     * No votes cast for consensus upgrade
     * @type {number}
     * @memberof NodeStatusResponse
     */
    upgradeNoVotes?: number;
    /**
     * The total number of key-values (KVs) included in the current catchpoint
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointTotalKvs?: number;
    /**
     * The total number of accounts included in the current catchpoint
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointTotalAccounts?: number;
    /**
     * LastRound indicates the last round seen
     * @type {number}
     * @memberof NodeStatusResponse
     */
    lastRound: number;
    /**
     * The number of accounts from the current catchpoint that have been verified so far as part of the catchup
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchpointVerifiedAccounts?: number;
    /**
     * CatchupTime in nanoseconds
     * @type {number}
     * @memberof NodeStatusResponse
     */
    catchupTime: number;
}
